import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QPushButton, QLabel, QFileDialog, QTextEdit, 
                            QMessageBox, QProgressBar, QHBoxLayout, QLineEdit,
                            QComboBox, QListWidget, QSplitter, QTabWidget,
                            QDialog, QFormLayout, QCheckBox, QGroupBox, QListWidgetItem,
                            QScrollArea)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QIcon
import requests
import json
import logging
import imaplib
import smtplib
import email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from datetime import datetime
import os
from dotenv import load_dotenv, set_key

# Load environment variables
load_dotenv()

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class LoginDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Login")
        self.setMinimumWidth(400)
        
        layout = QFormLayout(self)
        
        # Email input
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Enter your email")
        layout.addRow("Email:", self.email_input)
        
        # Password input
        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("Enter your password")
        self.password_input.setEchoMode(QLineEdit.Password)
        layout.addRow("Password:", self.password_input)
        
        # Remember me checkbox
        self.remember_checkbox = QCheckBox("Remember me")
        layout.addRow("", self.remember_checkbox)
        
        # Buttons
        button_layout = QHBoxLayout()
        self.login_button = QPushButton("Login")
        self.login_button.clicked.connect(self.accept)
        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.login_button)
        button_layout.addWidget(self.cancel_button)
        layout.addRow("", button_layout)
        
        # Load saved credentials if they exist
        saved_email = os.getenv('SAVED_EMAIL')
        if saved_email:
            self.email_input.setText(saved_email)
            self.remember_checkbox.setChecked(True)

    def get_credentials(self):
        return {
            'email': self.email_input.text(),
            'password': self.password_input.text(),
            'remember': self.remember_checkbox.isChecked()
        }

class EmailAnalyzerThread(QThread):
    finished = pyqtSignal(dict)
    error = pyqtSignal(str)

    def __init__(self, file_path):
        super().__init__()
        self.file_path = file_path

    def run(self):
        try:
            with open(self.file_path, 'rb') as f:
                files = {'file': f}
                logger.debug(f"Sending request to API with file: {self.file_path}")
                response = requests.post('http://localhost:5000/predict', files=files)
                
                logger.debug(f"Response status code: {response.status_code}")
                logger.debug(f"Response content: {response.text}")
                
                if response.status_code == 200:
                    try:
                        result = response.json()
                        self.finished.emit(result)
                    except json.JSONDecodeError as e:
                        logger.error(f"JSON decode error: {str(e)}")
                        self.error.emit(f"Error parsing response: {str(e)}")
                else:
                    error_msg = "Unknown error"
                    try:
                        error_data = response.json()
                        error_msg = error_data.get('error', error_msg)
                    except:
                        error_msg = response.text
                    self.error.emit(f"Error: {error_msg}")
        except requests.exceptions.ConnectionError:
            logger.error("Connection error - API server might not be running")
            self.error.emit("Cannot connect to API server. Please make sure the server is running.")
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            self.error.emit(str(e))

class EmailReceiverThread(QThread):
    emails_received = pyqtSignal(list)
    error = pyqtSignal(str)
    progress = pyqtSignal(str)

    def __init__(self, email_address, password, imap_server):
        super().__init__()
        self.email_address = email_address
        self.password = password
        self.imap_server = imap_server

    def run(self):
        try:
            self.progress.emit("ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß email...")
            mail = imaplib.IMAP4_SSL(self.imap_server)
            
            self.progress.emit("ƒêang ƒëƒÉng nh·∫≠p...")
            mail.login(self.email_address, self.password)
            
            self.progress.emit("ƒêang truy c·∫≠p h·ªôp th∆∞ ƒë·∫øn...")
            mail.select('inbox')
            
            self.progress.emit("ƒêang t·∫£i danh s√°ch email...")
            _, messages = mail.search(None, 'ALL')
            email_list = []
            
            message_numbers = messages[0].split()
            total_messages = len(message_numbers)
            self.progress.emit(f"T√¨m th·∫•y {total_messages} email")
            
            # L·∫•y 50 email m·ªõi nh·∫•t
            start_idx = max(0, total_messages - 50)
            
            for i in range(start_idx, total_messages):
                num = message_numbers[i]
                self.progress.emit(f"ƒêang t·∫£i email {i+1}/{total_messages}...")
                
                try:
                    _, msg = mail.fetch(num, '(RFC822)')
                    email_body = msg[0][1]
                    email_message = email.message_from_bytes(email_body)
                    
                    subject = email_message['subject']
                    from_addr = email_message['from']
                    date = email_message['date']
                    
                    # L·∫•y n·ªôi dung email
                    body = ""
                    if email_message.is_multipart():
                        for part in email_message.walk():
                            if part.get_content_type() == "text/plain":
                                try:
                                    body = part.get_payload(decode=True).decode()
                                except:
                                    body = part.get_payload()
                                break
                    else:
                        try:
                            body = email_message.get_payload(decode=True).decode()
                        except:
                            body = email_message.get_payload()
                    
                    email_list.append({
                        'subject': subject,
                        'from': from_addr,
                        'date': date,
                        'body': body
                    })
                except Exception as e:
                    self.progress.emit(f"B·ªè qua email l·ªói: {str(e)}")
                    continue
            
            # S·∫Øp x·∫øp email theo th·ªùi gian (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
            email_list.sort(key=lambda x: email.utils.parsedate_to_datetime(x['date']), reverse=True)
            
            self.progress.emit(f"ƒê√£ t·∫£i xong {len(email_list)} email")
            self.emails_received.emit(email_list)
            
        except Exception as e:
            self.error.emit(str(e))
        finally:
            try:
                mail.logout()
            except:
                pass

    def update_email_list(self, emails):
        self.email_list.clear()
        self.status_label.setText(f"ƒê√£ t·∫£i {len(emails)} email")
        
        if not emails:
            self.email_list.addItem("Kh√¥ng t√¨m th·∫•y email n√†o")
            return
            
        for email in emails:
            try:
                # Format hi·ªÉn th·ªã email
                display_text = f"üìß {email['subject']}\n"
                display_text += f"üë§ T·ª´: {email['from']}\n"
                display_text += f"üïí {email['date']}"
                
                item = QListWidgetItem(display_text)
                self.email_list.addItem(item)
            except:
                continue
        
        self.email_list.setProperty('emails', emails)
        
        # T·ª± ƒë·ªông ch·ªçn email ƒë·∫ßu ti√™n
        if self.email_list.count() > 0:
            self.email_list.setCurrentRow(0)
            self.show_email_details(self.email_list.item(0))

    def show_email_details(self, item):
        if not item:
            return
            
        emails = self.email_list.property('emails')
        if not emails:
            return
            
        index = self.email_list.row(item)
        if index < 0 or index >= len(emails):
            return
            
        email = emails[index]
        
        # Hi·ªÉn th·ªã chi ti·∫øt email
        details = f"Ti√™u ƒë·ªÅ: {email['subject']}\n"
        details += f"Ng∆∞·ªùi g·ª≠i: {email['from']}\n"
        details += f"Ng√†y: {email['date']}\n"
        details += f"\nN·ªôi dung:\n{email['body']}"
        
        self.email_details.setPlainText(details)

class EmailSenderThread(QThread):
    finished = pyqtSignal()
    error = pyqtSignal(str)

    def __init__(self, to_email, subject, body, smtp_server, smtp_port, email_address, password):
        super().__init__()
        self.to_email = to_email
        self.subject = subject
        self.body = body
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.email_address = email_address
        self.password = password

    def run(self):
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_address
            msg['To'] = self.to_email
            msg['Subject'] = self.subject
            
            msg.attach(MIMEText(self.body, 'plain'))
            
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email_address, self.password)
            server.send_message(msg)
            server.quit()
            
            self.finished.emit()
        except Exception as e:
            self.error.emit(str(e))

class GmailGuideDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Gmail")
        self.setMinimumWidth(600)
        self.setMinimumHeight(500)
        
        layout = QVBoxLayout(self)
        
        # T·∫°o scroll area ƒë·ªÉ ch·ª©a n·ªôi dung
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        content = QWidget()
        content_layout = QVBoxLayout(content)
        
        # Ti√™u ƒë·ªÅ
        title = QLabel("H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Gmail cho ·ª©ng d·ª•ng")
        title.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        content_layout.addWidget(title)
        
        # B∆∞·ªõc 1: B·∫≠t X√°c minh 2 b∆∞·ªõc
        step1 = QLabel("B∆∞·ªõc 1: B·∫≠t X√°c minh 2 b∆∞·ªõc")
        step1.setStyleSheet("font-size: 14px; font-weight: bold; margin-top: 20px;")
        content_layout.addWidget(step1)
        
        step1_content = QLabel(
            "1. ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n Google c·ªßa b·∫°n\n"
            "2. Truy c·∫≠p: https://myaccount.google.com/security\n"
            "3. T√¨m m·ª•c 'X√°c minh 2 b∆∞·ªõc' (2-Step Verification)\n"
            "4. Nh·∫•n 'B·∫Øt ƒë·∫ßu' v√† l√†m theo h∆∞·ªõng d·∫´n\n"
            "5. X√°c nh·∫≠n s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n\n"
            "6. Ho√†n t·∫•t qu√° tr√¨nh x√°c minh"
        )
        step1_content.setStyleSheet("margin-left: 20px;")
        content_layout.addWidget(step1_content)
        
        # B∆∞·ªõc 2: T·∫°o App Password
        step2 = QLabel("B∆∞·ªõc 2: T·∫°o App Password")
        step2.setStyleSheet("font-size: 14px; font-weight: bold; margin-top: 20px;")
        content_layout.addWidget(step2)
        
        step2_content = QLabel(
            "1. Sau khi b·∫≠t X√°c minh 2 b∆∞·ªõc, quay l·∫°i trang B·∫£o m·∫≠t\n"
            "2. T√¨m m·ª•c 'M·∫≠t kh·∫©u ·ª©ng d·ª•ng' (App Passwords)\n"
            "3. Ch·ªçn '·ª®ng d·ª•ng kh√°c' (Other)\n"
            "4. ƒê·∫∑t t√™n cho ·ª©ng d·ª•ng (v√≠ d·ª•: 'Email App')\n"
            "5. Nh·∫•n 'T·∫°o' (Generate)\n"
            "6. Google s·∫Ω t·∫°o cho b·∫°n m·ªôt m·∫≠t kh·∫©u 16 k√Ω t·ª±\n"
            "7. Sao ch√©p m·∫≠t kh·∫©u n√†y v√† l∆∞u l·∫°i c·∫©n th·∫≠n"
        )
        step2_content.setStyleSheet("margin-left: 20px;")
        content_layout.addWidget(step2_content)
        
        # B∆∞·ªõc 3: S·ª≠ d·ª•ng App Password
        step3 = QLabel("B∆∞·ªõc 3: S·ª≠ d·ª•ng App Password")
        step3.setStyleSheet("font-size: 14px; font-weight: bold; margin-top: 20px;")
        content_layout.addWidget(step3)
        
        step3_content = QLabel(
            "1. M·ªü ·ª©ng d·ª•ng c·ªßa ch√∫ng ta\n"
            "2. ƒêƒÉng nh·∫≠p v·ªõi:\n"
            "   - Email: ƒë·ªãa ch·ªâ Gmail c·ªßa b·∫°n\n"
            "   - M·∫≠t kh·∫©u: App Password 16 k√Ω t·ª± v·ª´a t·∫°o\n"
            "3. Kh√¥ng c·∫ßn nh·∫≠p d·∫•u c√°ch trong App Password"
        )
        step3_content.setStyleSheet("margin-left: 20px;")
        content_layout.addWidget(step3_content)
        
        # L∆∞u √Ω quan tr·ªçng
        notes = QLabel("L∆∞u √Ω quan tr·ªçng:")
        notes.setStyleSheet("font-size: 14px; font-weight: bold; margin-top: 20px; color: red;")
        content_layout.addWidget(notes)
        
        notes_content = QLabel(
            "‚Ä¢ App Password ch·ªâ hi·ªÉn th·ªã m·ªôt l·∫ßn khi t·∫°o, h√£y l∆∞u l·∫°i c·∫©n th·∫≠n\n"
            "‚Ä¢ B·∫°n c√≥ th·ªÉ t·∫°o nhi·ªÅu App Password cho nhi·ªÅu ·ª©ng d·ª•ng kh√°c nhau\n"
            "‚Ä¢ N·∫øu qu√™n ho·∫∑c m·∫•t App Password, b·∫°n c√≥ th·ªÉ x√≥a v√† t·∫°o m·ªõi\n"
            "‚Ä¢ App Password an to√†n h∆°n v√¨ n√≥ ch·ªâ c√≥ quy·ªÅn truy c·∫≠p email"
        )
        notes_content.setStyleSheet("margin-left: 20px; color: red;")
        content_layout.addWidget(notes_content)
        
        # Th√™m n√∫t ƒë√≥ng
        close_button = QPushButton("ƒê√≥ng")
        close_button.clicked.connect(self.accept)
        content_layout.addWidget(close_button)
        
        # Th√™m content v√†o scroll area
        scroll.setWidget(content)
        layout.addWidget(scroll)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Email Analyzer")
        self.setMinimumSize(800, 600)
        
        # Kh·ªüi t·∫°o c√°c bi·∫øn
        self.current_email = None
        self.current_password = None
        
        # T·∫°o giao di·ªán ch√≠nh
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)
        
        # T·∫°o c√°c input field
        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Nh·∫≠p email c·ªßa b·∫°n")
        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("Nh·∫≠p m·∫≠t kh·∫©u")
        self.password_input.setEchoMode(QLineEdit.Password)
        
        # T·∫°o n√∫t ƒëƒÉng nh·∫≠p v√† h∆∞·ªõng d·∫´n
        button_layout = QHBoxLayout()
        self.login_button = QPushButton("ƒêƒÉng nh·∫≠p")
        self.login_button.clicked.connect(self.check_login)
        self.guide_button = QPushButton("H∆∞·ªõng d·∫´n Gmail")
        self.guide_button.clicked.connect(self.show_gmail_guide)
        button_layout = QHBoxLayout()
        button_layout.addWidget(self.login_button)
        button_layout.addWidget(self.guide_button)
        self.layout.addLayout(button_layout)
        
        # Th√™m c√°c widget v√†o layout
        self.layout.addWidget(QLabel("Email:"))
        self.layout.addWidget(self.email_input)
        self.layout.addWidget(QLabel("M·∫≠t kh·∫©u:"))
        self.layout.addWidget(self.password_input)
        self.layout.addLayout(button_layout)
        
        # T·∫°o tab widget
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs)
        
        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        self.check_login()
        
    def show_gmail_guide(self):
        msg = QMessageBox()
        msg.setWindowTitle("H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Gmail")
        msg.setText("H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch t·∫°o v√† s·ª≠ d·ª•ng App Password cho Gmail")
        msg.setDetailedText(
            "B∆∞·ªõc 1: B·∫≠t X√°c minh 2 b∆∞·ªõc\n"
            "1. ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n Google c·ªßa b·∫°n\n"
            "2. Truy c·∫≠p: https://myaccount.google.com/security\n"
            "3. T√¨m m·ª•c 'X√°c minh 2 b∆∞·ªõc' (2-Step Verification)\n"
            "4. Nh·∫•n 'B·∫Øt ƒë·∫ßu' v√† l√†m theo h∆∞·ªõng d·∫´n\n"
            "5. X√°c nh·∫≠n s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n\n"
            "6. Ho√†n t·∫•t qu√° tr√¨nh x√°c minh\n\n"
            "B∆∞·ªõc 2: T·∫°o App Password\n"
            "1. Sau khi b·∫≠t X√°c minh 2 b∆∞·ªõc, quay l·∫°i trang B·∫£o m·∫≠t\n"
            "2. T√¨m m·ª•c 'M·∫≠t kh·∫©u ·ª©ng d·ª•ng' (App Passwords)\n"
            "3. Ch·ªçn '·ª®ng d·ª•ng kh√°c' (Other)\n"
            "4. ƒê·∫∑t t√™n cho ·ª©ng d·ª•ng (v√≠ d·ª•: 'Email App')\n"
            "5. Nh·∫•n 'T·∫°o' (Generate)\n"
            "6. Google s·∫Ω t·∫°o cho b·∫°n m·ªôt m·∫≠t kh·∫©u 16 k√Ω t·ª±\n"
            "7. Sao ch√©p m·∫≠t kh·∫©u n√†y v√† l∆∞u l·∫°i c·∫©n th·∫≠n\n\n"
            "B∆∞·ªõc 3: S·ª≠ d·ª•ng App Password\n"
            "1. M·ªü ·ª©ng d·ª•ng c·ªßa ch√∫ng ta\n"
            "2. ƒêƒÉng nh·∫≠p v·ªõi:\n"
            "   - Email: ƒë·ªãa ch·ªâ Gmail c·ªßa b·∫°n\n"
            "   - M·∫≠t kh·∫©u: App Password 16 k√Ω t·ª± v·ª´a t·∫°o\n"
            "3. Kh√¥ng c·∫ßn nh·∫≠p d·∫•u c√°ch trong App Password\n\n"
            "L∆∞u √Ω quan tr·ªçng:\n"
            "‚Ä¢ App Password ch·ªâ hi·ªÉn th·ªã m·ªôt l·∫ßn khi t·∫°o, h√£y l∆∞u l·∫°i c·∫©n th·∫≠n\n"
            "‚Ä¢ B·∫°n c√≥ th·ªÉ t·∫°o nhi·ªÅu App Password cho nhi·ªÅu ·ª©ng d·ª•ng kh√°c nhau\n"
            "‚Ä¢ N·∫øu qu√™n ho·∫∑c m·∫•t App Password, b·∫°n c√≥ th·ªÉ x√≥a v√† t·∫°o m·ªõi\n"
            "‚Ä¢ App Password an to√†n h∆°n v√¨ n√≥ ch·ªâ c√≥ quy·ªÅn truy c·∫≠p email"
        )
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def check_login(self):
        email = self.email_input.text()
        password = self.password_input.text()
        
        if not email or not password:
            QMessageBox.warning(self, "L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u")
            return
            
        # Ki·ªÉm tra n·∫øu l√† Gmail
        if "@gmail.com" in email.lower():
            reply = QMessageBox.question(
                self,
                "Th√¥ng b√°o Gmail",
                "B·∫°n ƒëang s·ª≠ d·ª•ng Gmail. ƒê·ªÉ s·ª≠ d·ª•ng Gmail, b·∫°n c·∫ßn:\n\n"
                "1. B·∫≠t X√°c minh 2 b∆∞·ªõc\n"
                "2. T·∫°o App Password\n"
                "3. S·ª≠ d·ª•ng App Password thay v√¨ m·∫≠t kh·∫©u th√¥ng th∆∞·ªùng\n\n"
                "B·∫°n ƒë√£ th·ª±c hi·ªán c√°c b∆∞·ªõc tr√™n ch∆∞a?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.No:
                self.show_gmail_guide()
                return

        try:
            # Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Gmail
            mail = imaplib.IMAP4_SSL('imap.gmail.com')
            mail.login(email, password)
            mail.logout()
            
            # L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p
            self.current_email = email
            self.current_password = password
            
            # X√≥a c√°c tab c≈©
            self.tabs.clear()
            
            # T·∫°o c√°c tab m·ªõi
            self.create_analyzer_tab()
            self.create_inbox_tab()
            self.create_compose_tab()
            
            # Chuy·ªÉn ƒë·∫øn tab inbox
            self.tabs.setCurrentIndex(1)
            
            # T·∫£i email sau 0.5 gi√¢y
            QTimer.singleShot(500, self.refresh_inbox)
            
        except Exception as e:
            QMessageBox.critical(
                self,
                "L·ªói ƒëƒÉng nh·∫≠p",
                f"Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p: {str(e)}\n\n"
                "Vui l√≤ng ki·ªÉm tra:\n"
                "1. B·∫°n ƒë√£ b·∫≠t X√°c minh 2 b∆∞·ªõc ch∆∞a?\n"
                "2. B·∫°n ƒë√£ t·∫°o App Password ch∆∞a?\n"
                "3. B·∫°n ƒëang s·ª≠ d·ª•ng App Password (kh√¥ng ph·∫£i m·∫≠t kh·∫©u Gmail th√¥ng th∆∞·ªùng)"
            )

    def create_inbox_tab(self):
        inbox_tab = QWidget()
        layout = QVBoxLayout(inbox_tab)
        
        # T·∫°o thanh t√¨m ki·∫øm
        search_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("T√¨m ki·∫øm email...")
        self.search_input.textChanged.connect(self.filter_emails)
        search_layout.addWidget(self.search_input)
        layout.addLayout(search_layout)
        
        # T·∫°o splitter ƒë·ªÉ chia m√†n h√¨nh
        splitter = QSplitter(Qt.Horizontal)
        
        # T·∫°o danh s√°ch email
        self.email_list = QListWidget()
        self.email_list.currentItemChanged.connect(self.show_email_details)
        splitter.addWidget(self.email_list)
        
        # T·∫°o ph·∫ßn hi·ªÉn th·ªã chi ti·∫øt email
        self.email_details = QTextEdit()
        self.email_details.setReadOnly(True)
        splitter.addWidget(self.email_details)
        
        # Th√™m splitter v√†o layout
        layout.addWidget(splitter)
        
        # Th√™m tab v√†o tab widget
        self.tabs.addTab(inbox_tab, "H·ªôp th∆∞ ƒë·∫øn")
        
        # T·∫°o label hi·ªÉn th·ªã tr·∫°ng th√°i
        self.status_label = QLabel()
        layout.addWidget(self.status_label)

    def refresh_inbox(self):
        if not hasattr(self, 'current_email') or not hasattr(self, 'current_password'):
            self.status_label.setText("Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc")
            return
            
        self.status_label.setText("ƒêang t·∫£i email...")
        self.email_list.clear()
        self.email_details.clear()
        
        # Lu√¥n s·ª≠ d·ª•ng Gmail IMAP
        imap_server = 'imap.gmail.com'
        
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc
            self.status_label.setText("ƒêang ki·ªÉm tra k·∫øt n·ªëi...")
            mail = imaplib.IMAP4_SSL(imap_server)
            
            # Th·ª≠ ƒëƒÉng nh·∫≠p
            self.status_label.setText("ƒêang ƒëƒÉng nh·∫≠p...")
            try:
                mail.login(self.current_email, self.current_password)
            except imaplib.IMAP4.error as e:
                error_msg = str(e)
                if "Authentication failed" in error_msg:
                    self.status_label.setText("L·ªói x√°c th·ª±c")
                    QMessageBox.warning(
                        self,
                        "L·ªói ƒëƒÉng nh·∫≠p",
                        "Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o Gmail.\n\n"
                        "Vui l√≤ng ki·ªÉm tra:\n"
                        "1. B·∫°n ƒë√£ b·∫≠t X√°c minh 2 b∆∞·ªõc ch∆∞a?\n"
                        "2. B·∫°n ƒë√£ t·∫°o App Password ch∆∞a?\n"
                        "3. B·∫°n ƒëang s·ª≠ d·ª•ng App Password (kh√¥ng ph·∫£i m·∫≠t kh·∫©u Gmail th√¥ng th∆∞·ªùng)"
                    )
                else:
                    self.status_label.setText(f"L·ªói: {error_msg}")
                return
                
            # T·∫°o thread ƒë·ªÉ t·∫£i email
            self.receiver_thread = EmailReceiverThread(
                self.current_email,
                self.current_password,
                imap_server
            )
            self.receiver_thread.emails_received.connect(self.update_email_list)
            self.receiver_thread.error.connect(self.handle_email_error)
            self.receiver_thread.progress.connect(self.status_label.setText)
            self.receiver_thread.start()
            
        except Exception as e:
            self.status_label.setText(f"L·ªói k·∫øt n·ªëi: {str(e)}")
            QMessageBox.critical(
                self,
                "L·ªói k·∫øt n·ªëi",
                f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gmail:\n{str(e)}\n\n"
                "Vui l√≤ng ki·ªÉm tra:\n"
                "1. K·∫øt n·ªëi internet c·ªßa b·∫°n\n"
                "2. T√†i kho·∫£n Gmail c·ªßa b·∫°n ƒë√£ b·∫≠t IMAP ch∆∞a\n"
                "3. B·∫°n ƒë√£ t·∫°o App Password ch∆∞a"
            )

    def update_email_list(self, emails):
        self.email_list.clear()
        self.status_label.setText(f"ƒê√£ t·∫£i {len(emails)} email")
        
        if not emails:
            self.email_list.addItem("Kh√¥ng t√¨m th·∫•y email n√†o")
            return
            
        for email in emails:
            try:
                # Format hi·ªÉn th·ªã email
                display_text = f"üìß {email['subject']}\n"
                display_text += f"üë§ T·ª´: {email['from']}\n"
                display_text += f"üïí {email['date']}"
                
                item = QListWidgetItem(display_text)
                self.email_list.addItem(item)
            except:
                continue
        
        self.email_list.setProperty('emails', emails)
        
        # T·ª± ƒë·ªông ch·ªçn email ƒë·∫ßu ti√™n
        if self.email_list.count() > 0:
            self.email_list.setCurrentRow(0)
            self.show_email_details(self.email_list.item(0))

    def show_email_details(self, item):
        if not item:
            return
            
        emails = self.email_list.property('emails')
        if not emails:
            return
            
        index = self.email_list.row(item)
        if index < 0 or index >= len(emails):
            return
            
        email = emails[index]
        
        # Hi·ªÉn th·ªã chi ti·∫øt email
        details = f"Ti√™u ƒë·ªÅ: {email['subject']}\n"
        details += f"Ng∆∞·ªùi g·ª≠i: {email['from']}\n"
        details += f"Ng√†y: {email['date']}\n"
        details += f"\nN·ªôi dung:\n{email['body']}"
        
        self.email_details.setPlainText(details)

    def handle_email_error(self, error_msg):
        self.email_list.clear()
        self.status_label.setText("L·ªói t·∫£i email")
        
        if "Authentication failed" in error_msg:
            self.email_list.addItem("‚ö†Ô∏è L·ªói x√°c th·ª±c Gmail")
            self.email_list.addItem("Vui l√≤ng l√†m theo c√°c b∆∞·ªõc sau:")
            self.email_list.addItem("1. ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n Google")
            self.email_list.addItem("2. V√†o ph·∫ßn 'B·∫£o m·∫≠t'")
            self.email_list.addItem("3. B·∫≠t 'X√°c minh 2 b∆∞·ªõc'")
            self.email_list.addItem("4. T·∫°o 'M·∫≠t kh·∫©u ·ª©ng d·ª•ng'")
            self.email_list.addItem("5. S·ª≠ d·ª•ng m·∫≠t kh·∫©u ·ª©ng d·ª•ng ƒë·ªÉ ƒëƒÉng nh·∫≠p")
        elif "Connection refused" in error_msg:
            self.email_list.addItem("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Gmail")
            self.email_list.addItem("Vui l√≤ng ki·ªÉm tra:")
            self.email_list.addItem("1. K·∫øt n·ªëi internet c·ªßa b·∫°n")
            self.email_list.addItem("2. T√†i kho·∫£n Gmail ƒë√£ b·∫≠t IMAP ch∆∞a")
        else:
            self.email_list.addItem(f"‚ö†Ô∏è L·ªói: {error_msg}")
            self.email_list.addItem("Vui l√≤ng th·ª≠ l·∫°i sau")

    def filter_emails(self, text):
        for i in range(self.email_list.count()):
            item = self.email_list.item(i)
            if text.lower() in item.text().lower():
                item.setHidden(False)
            else:
                item.setHidden(True)

    def create_analyzer_tab(self):
        analyzer_tab = QWidget()
        layout = QVBoxLayout(analyzer_tab)
        
        # Title
        title = QLabel("Email Phishing Detection")
        title.setFont(QFont('Arial', 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Upload button
        self.upload_btn = QPushButton("Select Email File (.eml)")
        self.upload_btn.setMinimumHeight(40)
        self.upload_btn.clicked.connect(self.select_file)
        layout.addWidget(self.upload_btn)
        
        # Progress bar
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        layout.addWidget(self.progress)
        
        # Result label
        self.result_label = QLabel("")
        self.result_label.setAlignment(Qt.AlignCenter)
        self.result_label.setFont(QFont('Arial', 12))
        layout.addWidget(self.result_label)
        
        # Email content display
        self.email_content = QTextEdit()
        self.email_content.setReadOnly(True)
        layout.addWidget(self.email_content)
        
        self.tabs.addTab(analyzer_tab, "Analyzer")

    def create_compose_tab(self):
        compose_tab = QWidget()
        layout = QVBoxLayout(compose_tab)
        
        # Email configuration
        config_layout = QHBoxLayout()
        
        self.smtp_email_input = QLineEdit()
        self.smtp_email_input.setPlaceholderText("Your Email")
        config_layout.addWidget(self.smtp_email_input)
        
        self.smtp_password_input = QLineEdit()
        self.smtp_password_input.setPlaceholderText("Password")
        self.smtp_password_input.setEchoMode(QLineEdit.Password)
        config_layout.addWidget(self.smtp_password_input)
        
        self.smtp_server_input = QLineEdit()
        self.smtp_server_input.setPlaceholderText("SMTP Server (e.g., smtp.gmail.com)")
        config_layout.addWidget(self.smtp_server_input)
        
        self.smtp_port_input = QLineEdit()
        self.smtp_port_input.setPlaceholderText("SMTP Port (e.g., 587)")
        config_layout.addWidget(self.smtp_port_input)
        
        layout.addLayout(config_layout)
        
        # Compose email
        self.to_input = QLineEdit()
        self.to_input.setPlaceholderText("To")
        layout.addWidget(self.to_input)
        
        self.subject_input = QLineEdit()
        self.subject_input.setPlaceholderText("Subject")
        layout.addWidget(self.subject_input)
        
        self.compose_body = QTextEdit()
        self.compose_body.setPlaceholderText("Write your email here...")
        layout.addWidget(self.compose_body)
        
        send_btn = QPushButton("Send Email")
        send_btn.clicked.connect(self.send_email)
        layout.addWidget(send_btn)
        
        self.tabs.addTab(compose_tab, "Compose")

    def select_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Email File",
            "",
            "Email Files (*.eml)"
        )
        
        if file_path:
            self.analyze_email(file_path)

    def analyze_email(self, file_path):
        self.progress.setVisible(True)
        self.upload_btn.setEnabled(False)
        self.result_label.setText("Analyzing email...")
        self.email_content.clear()
        
        self.analyzer_thread = EmailAnalyzerThread(file_path)
        self.analyzer_thread.finished.connect(self.handle_result)
        self.analyzer_thread.error.connect(self.handle_error)
        self.analyzer_thread.start()

    def handle_result(self, result):
        self.progress.setVisible(False)
        self.upload_btn.setEnabled(True)
        
        if result['prediction'] == 'phishing':
            self.result_label.setText("‚ö†Ô∏è This is a phishing email!")
            self.result_label.setStyleSheet("color: #d32f2f;")
        else:
            self.result_label.setText("‚úì This is a normal email")
            self.result_label.setStyleSheet("color: #388e3c;")
        
        # Display email content
        content = f"Subject: {result['subject']}\n\n"
        content += f"Body:\n{result['body']}"
        self.email_content.setText(content)

    def handle_error(self, error_msg):
        self.progress.setVisible(False)
        self.upload_btn.setEnabled(True)
        QMessageBox.critical(self, "Error", error_msg)

    def send_email(self):
        to_email = self.to_input.text()
        subject = self.subject_input.text()
        body = self.compose_body.toPlainText()
        email_address = self.smtp_email_input.text()
        password = self.smtp_password_input.text()
        smtp_server = self.smtp_server_input.text()
        smtp_port = self.smtp_port_input.text()
        
        if not all([to_email, subject, body, email_address, password, smtp_server, smtp_port]):
            QMessageBox.warning(self, "Warning", "Please fill in all fields")
            return
        
        try:
            smtp_port = int(smtp_port)
        except ValueError:
            QMessageBox.warning(self, "Warning", "SMTP port must be a number")
            return
        
        self.sender_thread = EmailSenderThread(
            to_email, subject, body, smtp_server, smtp_port, email_address, password
        )
        self.sender_thread.finished.connect(self.email_sent)
        self.sender_thread.error.connect(self.handle_error)
        self.sender_thread.start()

    def email_sent(self):
        QMessageBox.information(self, "Success", "Email sent successfully!")
        self.to_input.clear()
        self.subject_input.clear()
        self.compose_body.clear()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_()) 